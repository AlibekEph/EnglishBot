import logging
import os
import configparser
import requests
from typing import Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)

logger = logging.getLogger(__name__)
llm_logger = logging.getLogger('llm')
telegram_logger = logging.getLogger('telegram')

class LLMProvider:
    def __init__(self, config):
        self.config = config
        self.local_model_url = "http://llm-server:8000"
        self.min_confidence = float(config['LLM']['MIN_CONFIDENCE'])
        self.default_model = config['LLM']['DEFAULT_MODEL']
        self.available_local_models = config['LocalLLM']['AVAILABLE_MODELS'].split(',')
        llm_logger.info("LLM Provider initialized with local model URL: %s", self.local_model_url)

    async def check_text(self, text: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            model = self.default_model
            if model not in self.available_local_models:
                llm_logger.warning(f"Model {model} not available, using first available model")
                model = self.available_local_models[0]
            
            result = await self._check_with_local_model(text, model)
            return result
        except Exception as e:
            llm_logger.error(f"Error checking text: {str(e)}", exc_info=True)
            raise

    async def _check_with_local_model(self, text: str, model: str) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            llm_logger.info(f"Checking text with local model {model}")
            response = requests.post(
                f"{self.local_model_url}/generate",
                json={
                    "text": text,
                    "model": model,
                    "max_tokens": int(self.config['LLM']['MAX_TOKENS']),
                    "temperature": float(self.config['LLM']['TEMPERATURE'])
                },
                timeout=30
            )
            response.raise_for_status()
            result = response.json()
            llm_logger.info(f"Local model response: {result}")
            return result
        except requests.exceptions.RequestException as e:
            llm_logger.error(f"Error calling local model: {str(e)}", exc_info=True)
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: {str(e)}")

class EnglishGrammarBot:
    def __init__(self):
        self.config = configparser.ConfigParser()
        self.config.read('settings.ini')
        self.llm = LLMProvider(self.config)
        self.min_confidence = float(self.config['Bot']['MIN_CONFIDENCE'])
        logger.info("Bot initialized with settings from settings.ini")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        telegram_logger.info(f"User {user.id} ({user.username}) started the bot")
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –Ω–∞ –æ—à–∏–±–∫–∏."
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = update.effective_user
        telegram_logger.info(f"User {user.id} ({user.username}) requested help")
        help_text = """
        –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.
        
        –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è:
        1. –ü—Ä–æ–≤–µ—Ä—é –µ–≥–æ –Ω–∞ –æ—à–∏–±–∫–∏
        2. –ï—Å–ª–∏ –Ω–∞–π–¥—É –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–æ–∂—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        3. –û–±—ä—è—Å–Ω—é –æ—à–∏–±–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        
        –ö–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        await update.message.reply_text(help_text)

    async def process_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return

        user = update.effective_user
        chat = update.effective_chat
        text = update.message.text

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat_type = "private" if chat.type == "private" else f"{chat.type} ({chat.title})"
        telegram_logger.info(
            f"Message in {chat_type} from {user.id} ({user.username}): {text}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if text.startswith('/'):
            telegram_logger.debug(f"Ignoring command message: {text}")
            return

        if len(text) > int(self.config['Bot']['MAX_MESSAGE_LENGTH']):
            telegram_logger.warning(
                f"Message too long from user {user.id} in {chat_type}: {len(text)} chars"
            )
            if chat.type == "private":  # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                await update.message.reply_text(
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. "
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {self.config['Bot']['MAX_MESSAGE_LENGTH']} —Å–∏–º–≤–æ–ª–æ–≤."
                )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LLM
            result = await self.llm.check_text(text)
            
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['confidence'] < self.min_confidence:
                telegram_logger.warning(
                    f"Low confidence result ({result['confidence']}) for user {user.id} in {chat_type}"
                )
                return

            if result['has_errors']:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
                response = (
                    f"üîç –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n"
                    f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n{result['corrected_text']}\n\n"
                    f"üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{result['explanation']}"
                )
                telegram_logger.info(
                    f"Sending correction to user {user.id} in {chat_type}"
                )
                
                # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if chat.type != "private":
                    await update.message.reply_text(
                        response,
                        reply_to_message_id=update.message.message_id
                    )
                else:
                    await update.message.reply_text(response)
            else:
                telegram_logger.info(
                    f"No errors found for user {user.id} in {chat_type}"
                )
            
        except Exception as e:
            logger.error(
                f"Error processing message from user {user.id} in {chat_type}: {str(e)}",
                exc_info=True
            )
            if chat.type == "private":  # –û—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot...")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config['Telegram']['BOT_TOKEN']).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(MessageHandler(
            filters.TEXT | filters.ChatType.GROUPS | filters.ChatType.SUPERGROUP,
            self.process_message
        ))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot is ready to receive messages")
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EnglishGrammarBot()
    bot.run() 